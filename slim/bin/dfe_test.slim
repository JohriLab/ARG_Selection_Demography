//To run:
//slim -d "d_repID='1'"

initialize() {
///Set general parameters
    defineGlobal("scale", 10);
    defineGlobal("N", 20000);
    defineConstant("Na", 5000);
    defineGlobal("burnin", 10);
    defineGlobal("nSamples", 50);
    setSeed(1);
    initializeMutationRate(scale*1.25e-8);
    initializeRecombinationRate(scale*1e-8);

///Set DFE constants
    defineConstant("t0", 0.0);
    defineConstant("t1", -1.0/(2*Na));
    defineConstant("t2", -10.0/(2*Na));
    defineConstant("t3", -100.0/(2*Na));
    defineConstant("t4", -1.0);
    defineConstant("f_pos", 0);//fraction of beneficial mutations
    defineConstant("f_del", (1.0-f_pos));//fraction of all deleterious classes
    defineConstant("f0", 0.9997); //neutral
    defineConstant("f1", 0.0001); //weakly del
    defineConstant("f2", 0.0001); //mod del
    defineConstant("f3", 0.0001); //strong del
    defineConstant("f_intron", 1.54/(33.83+1.54));
    defineConstant("f_interg", 1.63/(43.67+1.63));

///Deleterious DFE
    initializeMutationType("m1", 0.5, "f", 0.0); //neutral coding, 2Nes = [0,-1]
    initializeMutationType("m2", 0.5, "s", "return runif(1, t2, t1);"); // -1<2Nes<-10, uniform distribution
    initializeMutationType("m3", 0.5, "s", "return runif(1, t3, t2);"); //moderately deleterious, -10<2Nes<-100, uniform distribution
    initializeMutationType("m4", 0.5, "s", "return runif(1, t4, t3);"); //strongly deleterious, 2Nes>=-100, uniform distribution
    initializeMutationType("m5", 0.5, "f", 0.0); //neutral intergenic, 2Nes = 0

///Beneficial Muts (disabled)
 //   defineConstant("gamma_pos", 125);
 //   defineConstant("s_pos", gamma_pos/(2.0*Na));
 //   initializeMutationType("m6", 0.5, "e", s_pos); //beneficial class

///Set genome structure parameters
    inter_len = 100000;
    intron_len = 6938; // Needed Lynch 2006 esimate of 3749, rather than Piovesan 2019's estimate of 6938bp
    exon_len = 311;
    UTR5 = 200;
    UTR3 = 800; //Assumes genes always on positive strand
    num_genes = 776;
    num_exons = 11;
    num_introns = 10;
   
    full_block_len = inter_len + UTR5 + exon_len*num_exons + intron_len*num_introns + UTR3;
    full_gene_len = exon_len*num_exons + intron_len*num_introns;
    exon_block_len = exon_len + intron_len; 

    print("selected_total = " + (exon_len*num_exons*num_genes+UTR5*num_genes+UTR3*num_genes));
    defineConstant("seltot", (exon_len*num_exons*num_genes+UTR5*num_genes+UTR3*num_genes));
    print ("gene length = " + full_gene_len);
    print ("total gene length = " + full_gene_len*num_genes);


///Create genomic elements classes (genes and intergenic)
	 initializeGenomicElementType("g1", c(m5, m1, m2, m3, m4), c(1-f_interg,f0*f_del*f_interg, f1*f_del*f_interg, f2*f_del*f_interg, f3*f_del*f_interg)); //intergenic
    initializeGenomicElementType("g2", c(m5, m1, m2, m3, m4), c(1-f_intron,f0*f_del*f_intron, f1*f_del*f_intron, f2*f_del*f_intron, f3*f_del*f_intron)); //intronic
    initializeGenomicElementType("g3", c(m1, m2, m3, m4), c(f0*f_del, f1*f_del, f2*f_del, f3*f_del)); //exons: weakly deleteriroundous, gamma, need to add m6 for ben muts
    initializeGenomicElementType("g4", c(m1, m2, m3, m4), c(f0*f_del, f1*f_del, f2*f_del, f3*f_del)); //5UTR: weakly deleterious, gamma, need to add m6 for ben muts
    initializeGenomicElementType("g5", c(m1, m2, m3, m4), c(f0*f_del, f1*f_del, f2*f_del, f3*f_del)); //3UTR: weakly deleterious, gamma, need to add m6 for ben muts

//Build genes 
	for (index_a in 0:(num_genes-1)){
        //print (index1);
        initializeGenomicElement(g1, (index_a*full_block_len), (index_a*full_block_len + inter_len-1)); //intergenic
        initializeGenomicElement(g4, (index_a*full_block_len + inter_len), (index_a*full_block_len + inter_len-1 + UTR5)); //Add 5' UTR
        for (index_b in 0:(num_introns-1)){
            //print (index_a);
            //print (index_b);
            initializeGenomicElement(g3, ((index_a*full_block_len) + inter_len + (index_b*exon_block_len) + UTR5), (index_a*full_block_len + inter_len + index_b*exon_block_len + exon_len - 1  + UTR5));//exon
            initializeGenomicElement(g2, (index_a*full_block_len + inter_len + index_b*exon_block_len + exon_len + UTR5), (index_a*full_block_len + inter_len + index_b*exon_block_len + exon_len + intron_len-1 + UTR5));//intron
            }
        initializeGenomicElement(g3, (index_a*full_block_len + inter_len + (index_b+1)*exon_block_len + UTR5), (index_a*full_block_len + inter_len + (index_b+1)*exon_block_len + exon_len - 1 + UTR5));//final exon
        initializeGenomicElement(g5, (index_a*full_block_len + inter_len + (index_b+1)*exon_block_len + exon_len + UTR5), (index_a*full_block_len + inter_len + (index_b+1)*exon_block_len + exon_len - 1 + UTR5 + UTR3));//end with 3' UTR
        }
    initializeGenomicElement(g1, full_block_len*num_genes, full_block_len*num_genes + inter_len - 1);//extra intergenic towards the end
}


1 early() {
    sim.addSubpop("p1", asInteger(N/scale));
}

20000 late(){
    p1.outputVCFSample(sampleSize=nSamples, outputMultiallelics=F, filePath="/work/users/j/i/jimarsh/test_sims/SLiM/dfebox/ds10_dfe_proper_test_N50_150Mb_R" + d_repID + ".vcf", append=F, outputNonnucleotides=T);

    print("N at the end of simulation: " + p1.individualCount);
    print("The last base in the chromosome: " + sim.chromosome.lastPosition);
    print("selprop: " + (seltot/sim.chromosome.lastPosition));
    print("nMutations = " + size(sim.mutations));
    print("m1 = " + (sim.countOfMutationsOfType(m1)/size(sim.mutations)));
    print("m2 = " + (sim.countOfMutationsOfType(m2)/size(sim.mutations)));
    print("m3 = " + (sim.countOfMutationsOfType(m3)/size(sim.mutations)));
    print("m4 = " + (sim.countOfMutationsOfType(m4)/size(sim.mutations)));
    print("m5 = " + (sim.countOfMutationsOfType(m5)/size(sim.mutations)));
//    print("m6 = " + (sim.countOfMutationsOfType(m6)/size(sim.mutations)));
}
