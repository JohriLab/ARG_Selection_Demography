//slim -d d_repID='1' 5Mb_100X.slim

initialize() {

defineGlobal("scale", 100);
defineGlobal("N", 1e6);
defineConstant("Na", asInteger(N/scale));
defineGlobal("burnin", 14);
defineGlobal("nSamples", 50);

defineConstant("t0", 0.0);
defineConstant("t1", -1.0/(2*Na));
defineConstant("t2", -10.0/(2*Na));
defineConstant("t3", -100.0/(2*Na));
defineConstant("t4", -1.0);

initializeMutationType(1, 0.5, "f", 0);
initializeMutationType(2, 0.5, "s", "return runif(1, t2, t1);");
initializeMutationType(3, 0.5, "s", "return runif(1, t3, t2);");
initializeMutationType(4, 0.5, "s", "return runif(1, t4, t3);");
initializeMutationType(5, 0.5, "f", 0);
initializeGenomicElementType(1, c(m1, m2, m3, m4, m5), c(0.125, 0.245, 0.02, 0.11, 0.5));

initializeMutationRate(3e-9*scale);
initializeRecombinationRate(1e-8*scale);

initializeGenomicElement(g1, 0, 5000000);

}

// create a population of 500 individuals
1 early() {
	sim.addSubpop("p1", asInteger(N/scale));
	
}

// output samples of 10 genomes periodically, all fixed mutations at end
50000 late() { 
print("Replicate:" + d_repID);
print("nsegsites 5N = " + size(sim.mutationCounts(p1)));
print("nsubs 5N = " + size(sim.substitutions));
print("Watterson theta 5N = " + calcWattersonsTheta(genomes=p1.genomes, muts=sim.mutationsOfType(m5))/0.5);
print("Theta pi for m5 mutations divided by proportion 5N = " + (calcHeterozygosity(genomes=p1.genomes, muts=sim.mutationsOfType(m5))/0.5)); }
100000 late() { 
print("Replicate:" + d_repID);
print("nsegsites 10N = " + size(sim.mutationCounts(p1)));
print("nsubs 10N = " + size(sim.substitutions));
print("Watterson theta 10N = " + calcWattersonsTheta(genomes=p1.genomes, muts=sim.mutationsOfType(m5))/0.5);
print("Theta pi for m5 mutations divided by proportion 10N = " + (calcHeterozygosity(genomes=p1.genomes, muts=sim.mutationsOfType(m5))/0.5)); }
150000 late() { 
print("Replicate:" + d_repID);
print("nsegsites 15N = " + size(sim.mutationCounts(p1)));
print("nsubs 15N = " + size(sim.substitutions));
print("Watterson theta 15N = " + calcWattersonsTheta(genomes=p1.genomes, muts=sim.mutationsOfType(m5))/0.5);
print("Theta pi for m5 mutations divided by proportion 15N = " + (calcHeterozygosity(genomes=p1.genomes, muts=sim.mutationsOfType(m5))/0.5)); }
200000 late() { 
print("Replicate:" + d_repID);
print("nsegsites 20N = " + size(sim.mutationCounts(p1)));
print("nsubs 20N = " + size(sim.substitutions));
print("Watterson theta 20N = " + calcWattersonsTheta(genomes=p1.genomes, muts=sim.mutationsOfType(m5))/0.5);
print("Theta pi for m5 mutations divided by proportion 20N = " + (calcHeterozygosity(genomes=p1.genomes, muts=sim.mutationsOfType(m5))/0.5));

print("N at the end of simulation: " + p1.individualCount);
print("The last base in the chromosome: " + sim.chromosome.lastPosition + " (" + asInteger(sim.chromosome.lastPosition)/1000000 + "Mb)");
print("Scaling factor: " + scale);

print("m1 = " + (sim.countOfMutationsOfType(m1)/size(sim.mutations)) + "(f0)");
print("m2 = " + (sim.countOfMutationsOfType(m2)/size(sim.mutations)) + "(f1)");
print("m3 = " + (sim.countOfMutationsOfType(m3)/size(sim.mutations)) + "(f2)");
print("m4 = " + (sim.countOfMutationsOfType(m4)/size(sim.mutations)) + "(f3)");
print("m5 = " + (sim.countOfMutationsOfType(m5)/size(sim.mutations)) + "(interg/intron neutral)");
}
