//slim -d d_repID='1' 1Mb_100X.slim

initialize() {

defineGlobal("scale", 100);
defineGlobal("N", 1e6);
defineConstant("Na", asInteger(N/scale));
defineGlobal("burnin", 14);
defineGlobal("nSamples", 50);

initializeMutationType(5, 0.5, "f", 0);
initializeGenomicElementType(1, m5, 1);

initializeMutationRate(3e-9*scale);
initializeRecombinationRate(1e-8*scale);

initializeGenomicElement(g1, 0, 1000000);

}

1 early() {
	sim.addSubpop("p1", asInteger(N/scale));
	
}

100000 late() { 
print("Replicate:" + d_repID);
print("nsegsites 10N = " + size(sim.mutationCounts(p1)));
print("nsubs 10N = " + size(sim.substitutions));
print("Watterson theta 10N = " + calcWattersonsTheta(genomes=p1.genomes, muts=sim.mutationsOfType(m5)));
print("Theta pi for m5 mutations divided by proportion 10N = " + (calcHeterozygosity(genomes=p1.genomes, muts=sim.mutationsOfType(m5)))); }

140000 late() { 
p1.outputVCFSample(sampleSize=nSamples, outputMultiallelics=F, filePath="/work/users/j/i/jimarsh/drosoph_sims/preprodbox/" + d_name + "_R" + d_repID + ".vcf", append=F, outputNonnucleotides=T);

sim.outputFixedMutations(); 
print("Replicate:" + d_repID);
print("nsegsites 14N = " + size(sim.mutationCounts(p1)));
print("nsubs 14N = " + size(sim.substitutions));
print("Watterson theta 14N = " + calcWattersonsTheta(genomes=p1.genomes, muts=sim.mutationsOfType(m5)));
print("Theta pi for m5 mutations divided by proportion 14N = " + (calcHeterozygosity(genomes=p1.genomes, muts=sim.mutationsOfType(m5))));

print("N at the end of simulation: " + p1.individualCount);
print("The last base in the chromosome: " + sim.chromosome.lastPosition + " (" + asInteger(sim.chromosome.lastPosition)/1000000 + "Mb)");
print("Scaling factor: " + scale);

print("m5 = " + (sim.countOfMutationsOfType(m5)/size(sim.mutations)) + "(interg/intron neutral)");
}
