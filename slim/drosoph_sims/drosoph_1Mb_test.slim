//To run:
//slim -d d_repID='1' -d "d_name='drosoph_1Mb_test'"

initialize() {
///Set general parameters
    defineGlobal("scale", 200);
    defineGlobal("N", 1e6);
    defineConstant("Na", N);
    defineGlobal("burnin", 14);
    defineGlobal("nSamples", 50);
    setSeed(asInteger(d_repID));
   
	defineConstant("t0", 0.0);
	defineConstant("t1", -1.0/(2*Na));
	defineConstant("t2", -10.0/(2*Na));
	defineConstant("t3", -100.0/(2*Na));
	defineConstant("t4", -1.0);
	defineConstant("f_pos", 0);//fraction of beneficial mutations
	defineConstant("f_del", (1.0-f_pos));//fraction of all deleterious classes
	defineConstant("f0", 0.25); //neutral
	defineConstant("f1", 0.49); //weakly del
	defineConstant("f2", 0.04); //mod del
	defineConstant("f3", 0.22); //strong del
//	defineConstant("f_intron", 1.54/(33.83+1.54));
	defineConstant("f_interg", 0.5);

	///Deleterious DFE
	initializeMutationType("m1", 0.5, "f", 0.0); //neutral coding, 2Nes = [0,-1]
	initializeMutationType("m2", 0.5, "s", "return runif(1, t2, t1);"); // -1<2Nes<-10, uniform distribution
	initializeMutationType("m3", 0.5, "s", "return runif(1, t3, t2);"); //moderately deleterious, -10<2Nes<-100, uniform distribution
	initializeMutationType("m4", 0.5, "s", "return runif(1, t4, t3);"); //strongly deleterious, 2Nes>=-100, uniform distribution
	initializeMutationType("m5", 0.5, "f", 0.0); //neutral intergenic, 2Nes = 0     

	 initializeGenomicElementType("g1", c(m1, m2, m3, m4, m5), c(f_interg*f0*f_del, f_interg*f1*f_del, f_interg*f2*f_del, f_interg*f3*f_del, 1-f_interg));
    initializeGenomicElement(g1, 0, 1000000); //2R chromosome

    initializeMutationRate(scale*3e-9);
    initializeRecombinationRate(scale*1e-8);
}

1 early() {
    sim.addSubpop("p1", asInteger(N/scale));
}

50000 late(){
	 p1.outputVCFSample(sampleSize=nSamples, outputMultiallelics=F, filePath="/work/users/j/i/jimarsh/drosoph_sims/testbox/" + d_name + "_R" + d_repID + ".vcf", append=F, outputNonnucleotides=T);
    sim.outputFixedMutations();     
    print("N at the end of simulation: " + p1.individualCount);
    print("The last base in the chromosome: " + sim.chromosome.lastPosition + " (" + asInteger(sim.chromosome.lastPosition)/1000000 + "Mb)");
    print("Total nMutations = " + size(sim.mutations));
    print("Theta pi for all mutations = " + (calcHeterozygosity(genomes=p1.genomes)));
    print("Theta pi for neutral interg/intron across whole genome = " + (calcHeterozygosity(genomes=p1.genomes, muts=sim.mutationsOfType(m5))));
    print("Rep" + d_repID + " theta pi for neutral interg/intron, size corrected = " + (calcHeterozygosity(genomes=p1.genomes, muts=sim.mutationsOfType(m5))/
		(f_interg*sim.chromosome.lastPosition)));
    print("m1 = " + (sim.countOfMutationsOfType(m1)/size(sim.mutations)) + "(f0)");
    print("m2 = " + (sim.countOfMutationsOfType(m2)/size(sim.mutations)) + "(f1)");
    print("m3 = " + (sim.countOfMutationsOfType(m3)/size(sim.mutations)) + "(f2)");
    print("m4 = " + (sim.countOfMutationsOfType(m4)/size(sim.mutations)) + "(f3)");
    print("m5 = " + (sim.countOfMutationsOfType(m5)/size(sim.mutations)));    
}
